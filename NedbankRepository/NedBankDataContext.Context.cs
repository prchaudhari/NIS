//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NedbankRepository
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class NedbankEntities : DbContext
    {
        public NedbankEntities()
            : base("name=NedbankEntities")
        {
        }

        public NedbankEntities(string connectionString)
                                                                   : base(connectionString)
        {
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
        public virtual DbSet<NB_BranchMaster> NB_BranchMaster { get; set; }
        public virtual DbSet<NB_CustomerMaster> NB_CustomerMaster { get; set; }
        public virtual DbSet<NB_InvestmentMaster> NB_InvestmentMaster { get; set; }
        public virtual DbSet<NB_InvestmentTransaction> NB_InvestmentTransaction { get; set; }
        public virtual DbSet<LanguageMaster> LanguageMaster { get; set; }
        public virtual DbSet<LanguageTenantMapping> LanguageTenantMapping { get; set; }

        [DbFunction("NedbankEntities", "FnGetParentAndChildTenant")]
        public virtual IQueryable<FnGetParentAndChildTenant_Result> FnGetParentAndChildTenant(string parentTenantCode)
        {
            var parentTenantCodeParameter = parentTenantCode != null ?
                new ObjectParameter("ParentTenantCode", parentTenantCode) :
                new ObjectParameter("ParentTenantCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FnGetParentAndChildTenant_Result>("[NedbankEntities].[FnGetParentAndChildTenant](@ParentTenantCode)", parentTenantCodeParameter);
        }
    
        [DbFunction("NedbankEntities", "FnGetStaticAndDynamicWidgets")]
        public virtual IQueryable<FnGetStaticAndDynamicWidgets_Result> FnGetStaticAndDynamicWidgets(Nullable<long> pageTypeId, string tenantCode)
        {
            var pageTypeIdParameter = pageTypeId.HasValue ?
                new ObjectParameter("PageTypeId", pageTypeId) :
                new ObjectParameter("PageTypeId", typeof(long));
    
            var tenantCodeParameter = tenantCode != null ?
                new ObjectParameter("TenantCode", tenantCode) :
                new ObjectParameter("TenantCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FnGetStaticAndDynamicWidgets_Result>("[NedbankEntities].[FnGetStaticAndDynamicWidgets](@PageTypeId, @TenantCode)", pageTypeIdParameter, tenantCodeParameter);
        }
    
        [DbFunction("NedbankEntities", "FnUserTenant")]
        public virtual IQueryable<FnUserTenant_Result> FnUserTenant(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FnUserTenant_Result>("[NedbankEntities].[FnUserTenant](@UserId)", userIdParameter);
        }
    }
}
